name: "Run Container Scan on Super Mario Docker Image with Quality Gate"

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

concurrency:
  group: trivy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  trivy-image-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Read version.txt after checkout and expose it as env
      - name: Read version
        id: ver
        run: |
          v=$(tr -d '\r' < version.txt)
          echo "VERSION=$v" >> "$GITHUB_ENV"

      - name: Docker Hub login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Ensure image exists
        run: docker pull docker.io/monicamarshall/supermariogitopsproject:${{ env.VERSION }}

      # --- SCAN: produce SARIF but don't block upload step ---
      - name: Trivy image scan
        id: trivy
        uses: aquasecurity/trivy-action@0.24.0
        continue-on-error: true                 # let subsequent steps run
        with:
          image-ref: docker.io/monicamarshall/supermariogitopsproject:${{ env.VERSION }}
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          exit-code: '1'                        # mark step as failure when vulns found
          format: 'sarif'
          output: 'trivy.sarif'

      # Always upload the SARIF to the Security tab, even if scan found vulns
      - name: Upload SARIF to Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      # Also keep a downloadable artifact for debugging
      - name: Keep SARIF as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif
          path: trivy.sarif

      # Finally, enforce the gate: fail the job if Trivy step failed
      - name: Fail if vulnerabilities were found
        if: steps.trivy.outcome == 'failure'
        run: |
          echo "High/Critical vulnerabilities detected by Trivy. Failing the job."
          exit 1
